#Spring Boot 使用一个全局的配置文件 application.properties 或 application.yml，放置在【src/main/resources】目录或者类路径的 /config 下。
#Spring Boot 不仅支持常规的 properties 配置文件，还支持 yaml 语言的配置文件。yaml 是以数据为中心的语言，在配置数据的时候具有面向对象的特征。
#Spring Boot 的全局配置文件的作用是对一些默认配置的配置值进行修改。

#两者同时生效，properties优先

#1．properties 和 yml，它们的区别主要是书写格式不同。
#2．Properties： app.user.name= javastack
#Yml：
#app：
#   user：name： javastack
#3．yml 格式不?持@PropertySource 注解导?配置。
#4．properties 和 yml 中包含相同属性时，properties 文件优先级高于 yml 文件。


#SpringBoot 项目jar 包打成 war 包需要什么？
#1. 去掉 pom.xml 的内置 tomcat
#2. 在 pom.xml 中配置启动类，使? spring-boot-maven-plugin 插件。
#3. 修改打包?式为<packaging>war</packaging>?式。
#4. 修改启动类，继承 SpringBootServletInitializer 类，然后重写??的 configure ?法，设定为启动类。
#5. 打包测试，通过命令 mvn clean package 打包。

#spring.profiles.activee=test（profile）指定不同环境配置application-{profile}.properties

#在application.properties中的各个参数之间，我们
# 也可以直接通过使用PlaceHolder的方式来进行引用，就像下面的设置：
#
#book.name=SpringCloud
#book.author=ZhaiYongchao
#book.desc=${book.author}  is writing《${book.name}》
#book.desc参数引用了上文中定义的book.name和book.author属性，最后该属性的值就是ZhaiYongchao is writing《SpringCloud》。


## 随机字符串  该配置方式可以用于设置应用端口等场景，避免在本地调试时出现端口冲突的麻烦
#com.didispace.blog.value=${random.value}
## 随机int
#com.didispace.blog.number=${random.int}
## 随机long
#com.didispace.blog.bignumber=${random.long}
## 10以内的随机数
#com.didispace.blog.test1=${random.int(10)}
## 10-20的随机数
#com.didispace.blog.test2=${random.int[10,20]}


#Swagger2
#swagger.title：标题
#swagger.description：描述
#swagger.version：版本
#swagger.license：许可证
#swagger.licenseUrl：许可证URL
#swagger.termsOfServiceUrl：服务条款URL
#swagger.contact.name：维护人
#swagger.contact.url：维护人URL
#swagger.contact.email：维护人email
#swagger.base-package：swagger扫描的基础包，默认：全扫描
#swagger.base-path：需要处理的基础URL规则，默认：/**
swagger.title=spring-boot-starter-swagger
swagger.description=Starter for swagger 2.x
swagger.version=1.4.0.RELEASE
swagger.license=Apache License, Version 2.0
swagger.licenseUrl=https://www.apache.org/licenses/LICENSE-2.0.html
swagger.termsOfServiceUrl=https://github.com/dyc87112/spring-boot-starter-swagger
swagger.contact.name=didi
swagger.contact.url=http://blog.didispace.com
swagger.contact.email=dyc87112@qq.com
swagger.base-package=com.didispace
swagger.base-path=/**

## Redis数据库索引（默认为0）
#spring.redis.database=0
## Redis服务器地址
#spring.redis.host=localhost
## Redis服务器连接端口
#spring.redis.port=6379
## Redis服务器连接密码（默认为空）
#spring.redis.password=
## 连接池最大连接数（使用负值表示没有限制） 默认 8
#spring.redis.lettuce.pool.max-active=8
## 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
#spring.redis.lettuce.pool.max-wait=-1
## 连接池中的最大空闲连接 默认 8
#spring.redis.lettuce.pool.max-idle=8
## 连接池中的最小空闲连接 默认 0
#spring.redis.lettuce.pool.min-idle=0


#同样配置，properties比yml优先级高
#spring.datasource.url=jdbc:mysql://localhost:3306/test
#spring.datasource.username=root
#spring.datasource.password=724111
##注意：因为Spring Boot 2.1.x默认使用了MySQL 8.0的驱动，所以这里采用com.mysql.cj.jdbc.Driver，而不是老的com.mysql.jdbc.Driver。
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
